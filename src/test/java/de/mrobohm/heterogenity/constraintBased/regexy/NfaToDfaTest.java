package de.mrobohm.heterogenity.constraintBased.regexy;

import de.mrobohm.heterogenity.constraintBased.regexy.minimizer.DfaMinimization;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class NfaToDfaTest {

    @Test
    void convert() {
        final var regex = "(a|(bc)*d)*";
        final var nfa = RegexToNfa.convert(regex);
        final var dfa = NfaToDfa.convert(nfa);
        System.out.println(nfa);
        System.out.println();
        System.out.println(dfa);

        final var expectedNfa = "NFA{nfa=[q{id=12, (->)=(%->13, 10), accept=false}, q{id=10, (->)=(%->0, 6), accept=false}, q{id=0, (->)=(a->1), accept=false}, q{id=1, (->)=(%->11), accept=false}, q{id=6, (->)=(%->7, 2), accept=false}, q{id=2, (->)=(b->3), accept=false}, q{id=3, (->)=(%->4), accept=false}, q{id=4, (->)=(c->5), accept=false}, q{id=5, (->)=(%->7, 2), accept=false}, q{id=7, (->)=(%->8), accept=false}, q{id=8, (->)=(d->9), accept=false}, q{id=9, (->)=(%->11), accept=false}, q{id=11, (->)=(%->13, 10), accept=false}, q{id=13, (->)=, accept=true}]}";
        final var expectedDfa = "DFA{dfa=[q{id=0, (->)=(ẞ->0), (0->0), (1->0), (2->0), (3->0), (4->0), (5->0), (6->0), (7->0), (8->0), (9->0), (A->0), (B->0), (C->0), (D->0), (Ä->0), (E->0), (F->0), (G->0), (H->0), (I->0), (J->0), (K->0), (L->0), (M->0), (N->0), (O->0), (P->0), (Q->0), (R->0), (S->0), (T->0), (U->0), (V->0), (Ö->0), (W->0), (X->0), (Y->0), (Z->0), (Ü->0), (ß->0), (a->1), (b->2), (c->0), (d->3), (ä->0), (e->0), (f->0), (g->0), (h->0), (i->0), (j->0), (k->0), (l->0), (m->0), (n->0), (o->0), (p->0), (q->0), (r->0), (s->0), (t->0), (u->0), (v->0), (ö->0), (w->0), (x->0), (y->0), (z->0), (ü->0), accept=true}, q{id=1, (->)=(ẞ->0), (0->0), (1->0), (2->0), (3->0), (4->0), (5->0), (6->0), (7->0), (8->0), (9->0), (A->0), (B->0), (C->0), (D->0), (Ä->0), (E->0), (F->0), (G->0), (H->0), (I->0), (J->0), (K->0), (L->0), (M->0), (N->0), (O->0), (P->0), (Q->0), (R->0), (S->0), (T->0), (U->0), (V->0), (Ö->0), (W->0), (X->0), (Y->0), (Z->0), (Ü->0), (ß->0), (a->1), (b->2), (c->0), (d->3), (ä->0), (e->0), (f->0), (g->0), (h->0), (i->0), (j->0), (k->0), (l->0), (m->0), (n->0), (o->0), (p->0), (q->0), (r->0), (s->0), (t->0), (u->0), (v->0), (ö->0), (w->0), (x->0), (y->0), (z->0), (ü->0), accept=true}, q{id=2, (->)=(ẞ->0), (0->0), (1->0), (2->0), (3->0), (4->0), (5->0), (6->0), (7->0), (8->0), (9->0), (A->0), (B->0), (C->0), (D->0), (Ä->0), (E->0), (F->0), (G->0), (H->0), (I->0), (J->0), (K->0), (L->0), (M->0), (N->0), (O->0), (P->0), (Q->0), (R->0), (S->0), (T->0), (U->0), (V->0), (Ö->0), (W->0), (X->0), (Y->0), (Z->0), (Ü->0), (ß->0), (a->0), (b->0), (c->4), (d->0), (ä->0), (e->0), (f->0), (g->0), (h->0), (i->0), (j->0), (k->0), (l->0), (m->0), (n->0), (o->0), (p->0), (q->0), (r->0), (s->0), (t->0), (u->0), (v->0), (ö->0), (w->0), (x->0), (y->0), (z->0), (ü->0), accept=false}, q{id=3, (->)=(ẞ->0), (0->0), (1->0), (2->0), (3->0), (4->0), (5->0), (6->0), (7->0), (8->0), (9->0), (A->0), (B->0), (C->0), (D->0), (Ä->0), (E->0), (F->0), (G->0), (H->0), (I->0), (J->0), (K->0), (L->0), (M->0), (N->0), (O->0), (P->0), (Q->0), (R->0), (S->0), (T->0), (U->0), (V->0), (Ö->0), (W->0), (X->0), (Y->0), (Z->0), (Ü->0), (ß->0), (a->1), (b->2), (c->0), (d->3), (ä->0), (e->0), (f->0), (g->0), (h->0), (i->0), (j->0), (k->0), (l->0), (m->0), (n->0), (o->0), (p->0), (q->0), (r->0), (s->0), (t->0), (u->0), (v->0), (ö->0), (w->0), (x->0), (y->0), (z->0), (ü->0), accept=true}, q{id=4, (->)=(ẞ->0), (0->0), (1->0), (2->0), (3->0), (4->0), (5->0), (6->0), (7->0), (8->0), (9->0), (A->0), (B->0), (C->0), (D->0), (Ä->0), (E->0), (F->0), (G->0), (H->0), (I->0), (J->0), (K->0), (L->0), (M->0), (N->0), (O->0), (P->0), (Q->0), (R->0), (S->0), (T->0), (U->0), (V->0), (Ö->0), (W->0), (X->0), (Y->0), (Z->0), (Ü->0), (ß->0), (a->0), (b->2), (c->0), (d->3), (ä->0), (e->0), (f->0), (g->0), (h->0), (i->0), (j->0), (k->0), (l->0), (m->0), (n->0), (o->0), (p->0), (q->0), (r->0), (s->0), (t->0), (u->0), (v->0), (ö->0), (w->0), (x->0), (y->0), (z->0), (ü->0), accept=false}]}";

        Assertions.assertEquals(expectedNfa, nfa.toString());
        Assertions.assertEquals(expectedDfa, dfa.toString());


        final var minimizedDfa = DfaMinimization.minimize(dfa);

        System.out.println(nfa.getNfa().size() + " vs " + dfa.getDfa().size() + " vs " + minimizedDfa.getDfa().size());
    }
}
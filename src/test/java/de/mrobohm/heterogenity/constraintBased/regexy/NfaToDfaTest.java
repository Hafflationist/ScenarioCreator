package de.mrobohm.heterogenity.constraintBased.regexy;

import de.mrobohm.heterogenity.constraintBased.regexy.minimizer.DfaMinimization;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class NfaToDfaTest {

    @Test
    void convert() {
        final var regex = "(a|(bc)*d)*";
        final var nfa = RegexToNfaOld.convert(regex);
        final var dfa = NfaToDfa.convert(nfa);
        System.out.println(nfa);
        System.out.println();
        System.out.println(dfa);

        final var expectedNfa = "NFA{nfa=[q{id=12, (->)=(12-%->13, 10), accept=false}, q{id=10, (->)=(10-%->0, 6), accept=false}, q{id=0, (->)=(0-a->1), accept=false}, q{id=1, (->)=(1-%->11), accept=false}, q{id=6, (->)=(6-%->7, 2), accept=false}, q{id=2, (->)=(2-b->3), accept=false}, q{id=3, (->)=(3-%->4), accept=false}, q{id=4, (->)=(4-c->5), accept=false}, q{id=5, (->)=(5-%->7, 2), accept=false}, q{id=7, (->)=(7-%->8), accept=false}, q{id=8, (->)=(8-d->9), accept=false}, q{id=9, (->)=(9-%->11), accept=false}, q{id=11, (->)=(11-%->13, 10), accept=false}, q{id=13, (->)=, accept=true}]}";
        final var expectedDfa = "DFA{dfa=[q{ transitions=(0-ẞ->0), (0-0->0), (0-1->0), (0-2->0), (0-3->0), (0-4->0), (0-5->0), (0-6->0), (0-7->0), (0-8->0), (0-9->0), (0-A->0), (0-B->0), (0-C->0), (0-D->0), (0-Ä->0), (0-E->0), (0-F->0), (0-G->0), (0-H->0), (0-I->0), (0-J->0), (0-K->0), (0-L->0), (0-M->0), (0-N->0), (0-O->0), (0-P->0), (0-Q->0), (0-R->0), (0-S->0), (0-T->0), (0-U->0), (0-V->0), (0-Ö->0), (0-W->0), (0-X->0), (0-Y->0), (0-Z->0), (0-Ü->0), (0-ß->0), (0-a->1), (0-b->2), (0-c->0), (0-d->3), (0-ä->0), (0-e->0), (0-f->0), (0-g->0), (0-h->0), (0-i->0), (0-j->0), (0-k->0), (0-l->0), (0-m->0), (0-n->0), (0-o->0), (0-p->0), (0-q->0), (0-r->0), (0-s->0), (0-t->0), (0-u->0), (0-v->0), (0-ö->0), (0-w->0), (0-x->0), (0-y->0), (0-z->0), (0-ü->0), accept=true }, q{ transitions=(1-ẞ->0), (1-0->0), (1-1->0), (1-2->0), (1-3->0), (1-4->0), (1-5->0), (1-6->0), (1-7->0), (1-8->0), (1-9->0), (1-A->0), (1-B->0), (1-C->0), (1-D->0), (1-Ä->0), (1-E->0), (1-F->0), (1-G->0), (1-H->0), (1-I->0), (1-J->0), (1-K->0), (1-L->0), (1-M->0), (1-N->0), (1-O->0), (1-P->0), (1-Q->0), (1-R->0), (1-S->0), (1-T->0), (1-U->0), (1-V->0), (1-Ö->0), (1-W->0), (1-X->0), (1-Y->0), (1-Z->0), (1-Ü->0), (1-ß->0), (1-a->1), (1-b->2), (1-c->0), (1-d->3), (1-ä->0), (1-e->0), (1-f->0), (1-g->0), (1-h->0), (1-i->0), (1-j->0), (1-k->0), (1-l->0), (1-m->0), (1-n->0), (1-o->0), (1-p->0), (1-q->0), (1-r->0), (1-s->0), (1-t->0), (1-u->0), (1-v->0), (1-ö->0), (1-w->0), (1-x->0), (1-y->0), (1-z->0), (1-ü->0), accept=true }, q{ transitions=(2-ẞ->0), (2-0->0), (2-1->0), (2-2->0), (2-3->0), (2-4->0), (2-5->0), (2-6->0), (2-7->0), (2-8->0), (2-9->0), (2-A->0), (2-B->0), (2-C->0), (2-D->0), (2-Ä->0), (2-E->0), (2-F->0), (2-G->0), (2-H->0), (2-I->0), (2-J->0), (2-K->0), (2-L->0), (2-M->0), (2-N->0), (2-O->0), (2-P->0), (2-Q->0), (2-R->0), (2-S->0), (2-T->0), (2-U->0), (2-V->0), (2-Ö->0), (2-W->0), (2-X->0), (2-Y->0), (2-Z->0), (2-Ü->0), (2-ß->0), (2-a->0), (2-b->0), (2-c->4), (2-d->0), (2-ä->0), (2-e->0), (2-f->0), (2-g->0), (2-h->0), (2-i->0), (2-j->0), (2-k->0), (2-l->0), (2-m->0), (2-n->0), (2-o->0), (2-p->0), (2-q->0), (2-r->0), (2-s->0), (2-t->0), (2-u->0), (2-v->0), (2-ö->0), (2-w->0), (2-x->0), (2-y->0), (2-z->0), (2-ü->0), accept=false }, q{ transitions=(3-ẞ->0), (3-0->0), (3-1->0), (3-2->0), (3-3->0), (3-4->0), (3-5->0), (3-6->0), (3-7->0), (3-8->0), (3-9->0), (3-A->0), (3-B->0), (3-C->0), (3-D->0), (3-Ä->0), (3-E->0), (3-F->0), (3-G->0), (3-H->0), (3-I->0), (3-J->0), (3-K->0), (3-L->0), (3-M->0), (3-N->0), (3-O->0), (3-P->0), (3-Q->0), (3-R->0), (3-S->0), (3-T->0), (3-U->0), (3-V->0), (3-Ö->0), (3-W->0), (3-X->0), (3-Y->0), (3-Z->0), (3-Ü->0), (3-ß->0), (3-a->1), (3-b->2), (3-c->0), (3-d->3), (3-ä->0), (3-e->0), (3-f->0), (3-g->0), (3-h->0), (3-i->0), (3-j->0), (3-k->0), (3-l->0), (3-m->0), (3-n->0), (3-o->0), (3-p->0), (3-q->0), (3-r->0), (3-s->0), (3-t->0), (3-u->0), (3-v->0), (3-ö->0), (3-w->0), (3-x->0), (3-y->0), (3-z->0), (3-ü->0), accept=true }, q{ transitions=(4-ẞ->0), (4-0->0), (4-1->0), (4-2->0), (4-3->0), (4-4->0), (4-5->0), (4-6->0), (4-7->0), (4-8->0), (4-9->0), (4-A->0), (4-B->0), (4-C->0), (4-D->0), (4-Ä->0), (4-E->0), (4-F->0), (4-G->0), (4-H->0), (4-I->0), (4-J->0), (4-K->0), (4-L->0), (4-M->0), (4-N->0), (4-O->0), (4-P->0), (4-Q->0), (4-R->0), (4-S->0), (4-T->0), (4-U->0), (4-V->0), (4-Ö->0), (4-W->0), (4-X->0), (4-Y->0), (4-Z->0), (4-Ü->0), (4-ß->0), (4-a->0), (4-b->2), (4-c->0), (4-d->3), (4-ä->0), (4-e->0), (4-f->0), (4-g->0), (4-h->0), (4-i->0), (4-j->0), (4-k->0), (4-l->0), (4-m->0), (4-n->0), (4-o->0), (4-p->0), (4-q->0), (4-r->0), (4-s->0), (4-t->0), (4-u->0), (4-v->0), (4-ö->0), (4-w->0), (4-x->0), (4-y->0), (4-z->0), (4-ü->0), accept=false }]}";

        Assertions.assertEquals(expectedNfa, nfa.toString());
        Assertions.assertEquals(expectedDfa, dfa.toString());


        final var minimizedDfa = DfaMinimization.minimize(dfa);

        System.out.println(nfa.getNfa().size() + " vs " + dfa.getDfa().size() + " vs " + minimizedDfa.getDfa().size());
    }
}